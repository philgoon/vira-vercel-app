\n/**\n * Update Vendor Categories Script  \n *\n * Purpose: Test and debug rating conversion logic\n * Issue: Rating conversion from 10‚Üí5 point scale not working\n */\n\nimport { config } from 'dotenv'; \nimport fs from 'fs'; \nimport path from 'path'; \n\n// Load environment variables\nconfig();\n\ninterface AcceloRow {\n  ticketAssignee: string;\n  ticketTitle: string;\n  ticketCompanyName: string;\n  projectSuccessRating: string;\n  overallVendorRating: string;\n  workQualityRating: string;\n  communicationRating: string;\n}\n\n/**\n * Convert 10-point rating to 5-point scale\n */\nfunction convertRating(rating: string): number | null {\n  console.log(`üîç Converting rating: "${rating}"`);\n  const numRating = parseFloat(rating);\n  console.log(`üìä Parsed as number: ${numRating}`);\n  \n  if (isNaN(numRating) || numRating === 0) {\n    console.log(`‚ö†Ô∏è Invalid rating, returning null`);\n    return null;\n  }\n\n  const converted = Math.round(numRating / 2);\n  const final = Math.max(1, converted);\n  console.log(`‚úÖ Converted: ${numRating} ‚Üí ${final}`);\n  return final;\n}\n\n/**\n * Parse original Accelo CSV data\n */\nfunction parseAcceloData(csvPath: string): AcceloRow[] {\n  const csvContent = fs.readFileSync(csvPath, 'utf-8');\n  const lines = csvContent.split('\\n');\n  const rows: AcceloRow[] = [];\n\n  for (let i = 1; i < lines.length && i <= 3; i++) { // Only process first 2 rows for testing\n    const line = lines[i].trim();\n    if (!line) continue;\n\n    const values = line.split(',');\n    if (values.length < 14) continue;\n\n    const row = {\n      ticketAssignee: values[0]?.replace(/\"/g, '').trim() || '',\n      ticketTitle: values[2]?.replace(/\"/g, '').trim() || '',  \n      ticketCompanyName: values[3]?.replace(/\"/g, '').trim() || '',\n      projectSuccessRating: values[5]?.replace(/\"/g, '').trim() || '',\n      overallVendorRating: values[8]?.replace(/\"/g, '').trim() || '',\n      workQualityRating: values[9]?.replace(/\"/g, '').trim() || '',\n      communicationRating: values[10]?.replace(/\"/g, '').trim() || ''\n    };\n\n    console.log(`\\nüìã Row ${i}:`);\n    console.log(`  Vendor: ${row.ticketAssignee}`);\n    console.log(`  Project: ${row.ticketTitle}`);\n    console.log(`  Raw ratings: success=${row.projectSuccessRating}, overall=${row.overallVendorRating}, quality=${row.workQualityRating}, comm=${row.communicationRating}`);\n    \n    rows.push(row);\n  }\n\n  return rows;\n}\n\nasync function testRatingConversion() {\n  console.log('üß™ Testing rating conversion logic...');\n\n  try {\n    // Load CSV data\n    const csvPath = path.join(process.cwd(), 'ViRA _ Accelo Ticket Export - Sheet1.csv');\n    const acceloData = parseAcceloData(csvPath);\n\n    console.log(`\\nüìä Testing conversion on ${acceloData.length} sample rows`);\n\n    for (const row of acceloData) {\n      console.log(`\\nüéØ Testing: ${row.ticketTitle}`);\n      \n      const convertedSuccess = convertRating(row.projectSuccessRating);\n      const convertedOverall = convertRating(row.overallVendorRating);\n      const convertedQuality = convertRating(row.workQualityRating);\n      const convertedComm = convertRating(row.communicationRating);\n      \n      console.log(`‚úÖ Final converted values:`);\n      console.log(`  Project Success: ${row.projectSuccessRating} ‚Üí ${convertedSuccess}`);\n      console.log(`  Overall: ${row.overallVendorRating} ‚Üí ${convertedOverall}`);\n      console.log(`  Quality: ${row.workQualityRating} ‚Üí ${convertedQuality}`);\n      console.log(`  Communication: ${row.communicationRating} ‚Üí ${convertedComm}`);\n    }\n\n    console.log('\\nüéâ Conversion test completed!');\n\n  } catch (error) {\n    console.error('üí• Test failed:', error);\n    throw error;\n  }\n}\n\n// Run test if called directly\nif (require.main === module) {\n  testRatingConversion()\n    .then(() => process.exit(0))\n    .catch(() => process.exit(1));\n}\n\nexport { testRatingConversion };\n
